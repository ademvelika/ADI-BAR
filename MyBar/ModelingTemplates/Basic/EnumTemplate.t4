<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IEnumeration" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="..\CSharpHelpers.t4" #>
<#@ Include File="..\CSharpCommentHelpers.t4" #>
<#
    WriteAutoGeneratedWarningHeader();

    string enumNamespace = GetNamespace(this.Element.Namespace);
    if(!string.IsNullOrEmpty(enumNamespace))
    {
#>
namespace <#= enumNamespace #>
{
<#
        PushIndent("\t");
    }

    WriteUsingStatements(this.Element);
    WriteLine("");
#>
<#  
    WriteSummaryComment(this.Element.Description);
    foreach(var comment in this.Element.GetModelStore().AllInstances<IComment>().Where(c => c.AnnotatedElements.Contains(this.Element)))
    {
        WriteRemarksComment(comment.Body);
    }

    WriteEnumClrAttributes(this.Element);
#>
<#= EnumVisibility(Element) #>enum <#= this.Element.Name #><#= EnumBaseTypeOption(this.Element) #>
{
<#
    PushIndent("\t");
    foreach(var literal in this.Element.OwnedLiterals)
    {
        WriteSummaryComment(literal.Description);  #>
<#= literal.Name #><#= LiteralValueOption(literal) #>,
<#
    }
	PopIndent();
#>
}
<#
    ClearIndent();
    if(!string.IsNullOrEmpty(enumNamespace))
    {
#>
}
<#  } #>
<#+
    /// <summary>
    ///  Get the integer value of an enumeration literal if one is specified;
    /// </summary>
    /// <param name="literal">The enumeration literal that might or might not have a Integer as a Value specification</param>
    /// <returns>a string of the form "_=_<integer>"</returns>
    private static string LiteralValueOption(IEnumerationLiteral literal)
    {
        if(literal.Specification != null && literal.Specification is ILiteralInteger)
        {
            var spec = literal.Specification as ILiteralInteger;
            return string.Format(" = {0}", spec.Value);
        }

        return string.Empty;
    }
    
    
    /// <summary>
    /// Get enumerations base type from the stereotype  
    /// </summary>
    /// <param name="interfaceElement"></param>
    /// <returns>a string of the form "_:_<base>" where base can be a C# base type for enum's (all signed and unsigned integer of all byte lengths)</returns>
    public static string EnumBaseTypeOption(IEnumeration enumeration)
    {
        string baseType = GetProperty(enumeration, "enum", "BaseType");
        if(!string.IsNullOrEmpty(baseType))
        {
            baseType = " : " + baseType;
        }

        return baseType;
    }

    /// <summary>
    /// Get the visibility of the given Enum.
    /// </summary>
    /// <param name="enumeration">The element in question</param>
    /// <returns>public, protected, protected internal, internal, or private</returns>
    private static string EnumVisibility(IEnumeration enumeration)
    {
        return Visibility(enumeration, "enum", "PackageVisibility");
    }
#>
<#+
    protected override bool AppliesToElement()
    {
         bool isTemplate = this.Element.IsTemplate;
         bool isBoundElement = this.Element.TemplateBindings != null && this.Element.TemplateBindings.Any();
         return !isTemplate && !isBoundElement && GetStereotype(this.Element) == "enum";
    }
#>