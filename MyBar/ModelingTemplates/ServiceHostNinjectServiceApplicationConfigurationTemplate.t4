<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".config" #>
<?xml version="1.0" encoding="utf-8"?>
<services>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Domain");

string classNamespace = GetNamespace(this.Element.Namespace);
string className = this.Element.Name;

#>
<#
		string commandName = null;
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildService" && property.Value == "true");

			bool createCommand = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildCreateCommand" && property.Value == "true");
			if (createCommand)
				commandName = moduleName + ".Commands.Handlers.Create" + elementName;

			if (shouldBuild)
			{
#>
	<service name="<#= classNamespace #>.<#= className #>.<#= moduleName #>.Services.<#= elementName #>Service">
		<endpoint binding="basicHttpBinding" contract="<#= classNamespace #>.<#= className #>.<#= moduleName #>.Services.I<#= elementName #>Service" />
		<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
	</service>
<#
			}
		}
#>

<#
		foreach (var element in AllElements(this.Element, "Service").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			string aggregateRootName = element.AppliedStereotypes
				.Single(property => property.Name == "Service")
				.PropertyInstances
				.Single(property => property.Name == "AggregateRootName")
				.Value;
			bool shouldBuild = GetElementByFullName(element, aggregateRootName) == null;

			if (shouldBuild)
			{
#>
	<service name="<#= classNamespace #>.<#= className #>.<#= moduleName #>.Services.<#= elementName #>">
		<endpoint binding="basicHttpBinding" contract="<#= classNamespace #>.<#= className #>.<#= moduleName #>.Services.I<#= elementName #>" />
		<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
	</service>
<#
			}
			else
			{
#>
	<!-- <#= elementName #> does not need a binding -->
<#
			}
		}
#>
</services>
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Domain"); // && GetEntityPersistenceTechnology(this.Element) == "MongoDb";
	}
#>