<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Domain");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = this.Element.Name;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Linq;
using Cqrs.Configuration;
using Cqrs.DataStores;
using cdmdotnet.Logging;
<# if (GetEntityPersistenceTechnology(this.Element) == "MongoDB"){ #>
using Cqrs.Mongo.DataStores;
using Cqrs.Mongo.Factories;
<# } #>
using Cqrs.Services;
using Ninject.Modules;
using Ninject.Parameters;

namespace <#= classNamespace #>.<#= className #>.Configuration
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public partial class DomainNinjectModule : NinjectModule
	{
		#region Overrides of NinjectModule

		/// <summary>
		/// Loads the module into the kernel.
		/// </summary>
		public override void Load()
		{
			RegisterLogger();

			RegisterFactories();
			RegisterServices();
			RegisterRepositories();
			RegisterCqrsCommandHandlers();
		}

		#endregion

		/// <summary>
		/// Register the <see cref="ILogger"/>
		/// </summary>
		protected virtual void RegisterLogger()
		{
			bool isLoggerBound = Kernel.GetBindings(typeof(ILogger)).Any();
			if (!isLoggerBound)
			{
				Bind<ILogger>()
					.To<ConsoleLogger>()
					.InSingletonScope();
			}
		}

		/// <summary>
		/// Register the all factories
		/// </summary>
		public virtual void RegisterFactories()
		{
			Bind<Factories.IDomainDataStoreFactory>()
<#
			var technology = GetEntityPersistenceTechnology(this.Element);
			switch(technology)
			{
				case "MongoDb" :
#>
				.To<Factories.DomainMongoDataStoreFactory>()
<#
					break;
				case "AzureDocumentDb" :
#>
				.To<Factories.DomainAzureDocumentDbDataStoreFactory>()
<#
					break;
				case "SimplifiedSql" :
#>
				.To<Factories.DomainSimplifiedSqlDataStoreFactory>()
<#
					break;
				case "SqlServer" :
#>
				.To<Factories.DomainSqlDataStoreFactory>()
<#
					break;
				case "MySqlServer" :
#>
				.To<Factories.DomainMySqlDataStoreFactory>()
<#
					break;
				case "InProcessOnly" :
#>
				.To<Factories.DomainInProcessDataStoreFactory>()
<#
					break;
			}
#>
				.InSingletonScope();
<# if (GetDomainAuthenticationTokenType(this.Element) == "Cqrs.Authentication.ISingleSignOnToken") { #>

			Bind<Cqrs.Authentication.ISingleSignOnTokenFactory>()
				.To<Cqrs.Authentication.SingleSignOnTokenFactory>()
				.InSingletonScope();
<# } #>

			OnFactoriesRegistered();
		}

		partial void OnFactoriesRegistered();

		/// <summary>
		/// Register the all services
		/// </summary>
		public virtual void RegisterServices()
		{
			Bind<IUnitOfWorkService>()
				.To<UnitOfWorkService<<#= stereoTypeProperties.PropertyInstances.Single(property => property.Name == "AuthenticationTokenType").Value #>>>()
				.InThreadScope();

<#
		string commandName = null;
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildService" && property.Value == "true");

			bool createCommand = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildCreateCommand" && property.Value == "true");
			if (createCommand)
				commandName = moduleName + ".Commands.Handlers.Create" + elementName;

			if (shouldBuild)
			{
#>
			Bind<<#= moduleName #>.Services.I<#= elementName #>Service>()
				.To<<#= moduleName #>.Services.<#= elementName #>Service>()
				.InSingletonScope();
<#
			}
		}
#>

<#
		foreach (var element in AllElements(this.Element, "Service").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			string aggregateRootName = element.AppliedStereotypes
				.Single(property => property.Name == "Service")
				.PropertyInstances
				.Single(property => property.Name == "AggregateRootName")
				.Value;
			bool shouldBuild = GetElementByFullName(element, aggregateRootName) == null;

			if (shouldBuild)
			{
#>
			Bind<<#= moduleName #>.Services.I<#= elementName #>>()
				.To<<#= moduleName #>.Services.<#= elementName #>>()
				.InSingletonScope();
<#
			}
			else
			{
#>
			// <#= elementName #> does not need a binding
<#
			}
		}
#>

			OnServicesRegistered();
		}

		partial void OnServicesRegistered();

		/// <summary>
		/// Register the all repositories
		/// </summary>
		public virtual void RegisterRepositories()
		{
<#
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildRepository" && property.Value == "true");

			if (shouldBuild)
			{
#>
			Bind<<#= moduleName #>.Repositories.I<#= elementName #>Repository>()
				.To<<#= moduleName #>.Repositories.<#= elementName #>Repository>()
				.InSingletonScope();
<#
			}
		}
#>

			OnRepositoriesRegistered();
		}

		partial void OnRepositoriesRegistered();

		/// <summary>
		/// Register the all Cqrs command handlers
		/// </summary>
		public virtual void RegisterCqrsCommandHandlers()
		{
			var dependencyResolver = Resolve<IDependencyResolver>();
<#
string eventHandlerTechnology = GetEventHandlerTechnology(this.Element);
switch(eventHandlerTechnology)
{
	case "Akka":
#>
			var handlerResolver = Resolve<IHandlerResolver>();
<#
		break;
}
#>
			var registrar = new <#
switch(eventHandlerTechnology)
{
	case "Akka":
		#>Cqrs.Akka.Configuration.AkkaBusRegistrar<<#= stereoTypeProperties.PropertyInstances.Single(property => property.Name == "AuthenticationTokenType").Value #>>(dependencyResolver, handlerResolver)<#
		break;
	default:
		#>BusRegistrar(dependencyResolver)<#
		break;
}
#>;
			RegisterCqrsCommandHandlers(registrar);
		}

		/// <summary>
		/// Register the all Cqrs command handlers
		/// </summary>
		protected virtual void RegisterCqrsCommandHandlers(BusRegistrar registrar)
		{
			// This will load all the handlers from the domain assembly by reading all command handlers AND event handlers in the same assembly as the provided type
<#
		if (string.IsNullOrWhiteSpace(commandName))
		{
			INamedElement commandElement = AllElements(this.Element, "Command").OfType<INamedElement>().FirstOrDefault();
			if (commandElement != null)
			{
				string commandNamespace = GetNamespace(commandElement.Namespace);
				commandName = commandNamespace + ".Handlers." + commandElement.Name;
			}
		}
		if (!string.IsNullOrWhiteSpace(commandName))
		{
#>
			registrar.Register(typeof(<#= commandName #>CommandHandler));
<#
		}
#>
			OnCqrsCommandHandlersRegistered();
		}

		partial void OnCqrsCommandHandlersRegistered();

		protected T Resolve<T>()
		{
			return (T)Resolve(typeof(T));
		}

		protected object Resolve(Type serviceType)
		{
			return Kernel.Resolve(Kernel.CreateRequest(serviceType, null, new Parameter[0], true, true)).SingleOrDefault();
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Domain"); // && GetEntityPersistenceTechnology(this.Element) == "MongoDb";
	}
#>