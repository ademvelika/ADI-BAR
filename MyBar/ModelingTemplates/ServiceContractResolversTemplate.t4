<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
WriteUsingStatements(this.Element);
#>
using System.Xml;
using Cqrs.Events;
using Cqrs.Services;

namespace <#= classNamespace #>
{
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodResponseTypeName = "ServiceResponseWithResultData<";
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (IsMethodTypeEntity(collectionMethod))
			{
				string methodTypeNameSuffix = string.Empty;
				while (methodTypeName.EndsWith(">"))
				{
					methodTypeNameSuffix = string.Concat(methodTypeNameSuffix, methodTypeName.Substring(methodTypeName.Length - 1));
					methodTypeName = methodTypeName.Substring(0, methodTypeName.Length - 1);
				}
				methodTypeName = string.Format("{0}Entity{1}", methodTypeName, methodTypeNameSuffix);
			}
			if (methodTypeName == "void")
			{
				methodResponseTypeName = "ServiceResponse";
				methodTypeName = string.Empty;
			}
			else
			{
				if (!methodTypeName.Contains("<"))
					methodTypeName = "Entities." + methodTypeName;
				methodTypeName = methodTypeName + ">";
			}

			string methodParameterList = GetMethodParameterList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterList))
				methodParameterList = methodParameterList + ", ";

			var methodSignatureParameter = string.Empty;

			var returnParameter = collectionMethod.OwnedParameters.SingleOrDefault(p => p.Direction == ParameterDirectionKind.Return);
			var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return);
			if (returnParameter == null && parameters.Any())
				methodSignatureParameter = string.Format("ServiceRequestWithData<{0}, {1}{2}Parameters>", authenticationTokenType, className, collectionMethod.Name);
			else if (returnParameter != null)
				methodSignatureParameter = string.Format("ServiceRequestWithData<{0}, {1}{2}Parameters>", authenticationTokenType, className, collectionMethod.Name);
			else
				methodSignatureParameter = string.Format("ServiceRequest<{0}>", authenticationTokenType);
#>

	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="I<#= className #>.<#= collectionMethod.Name #>"/> via WCF
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #><#= collectionMethod.Name #>Resolver : ServiceParameterResolver<I<#= className #>, <#= authenticationTokenType #>>
	{
		public <#= className #><#= collectionMethod.Name #>Resolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}

<#
string authenticationTokenTypeResolver = authenticationTokenType;
int index = authenticationTokenTypeResolver.LastIndexOf(".");
if (index > 0)
	authenticationTokenTypeResolver = string.Format("{0}{1}Resolver", authenticationTokenTypeResolver.Substring(0, index + 1), authenticationTokenTypeResolver.Substring(index + 2));
#>
		public <#= className #><#= collectionMethod.Name #>Resolver()
			: base(new <#= authenticationTokenTypeResolver #>(), new EventDataResolver<<#= authenticationTokenType #>>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(<#= methodSignatureParameter #>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #><#= collectionMethod.Name #>");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}
<#
			if (!string.IsNullOrWhiteSpace(methodTypeName))
			{
#>

			if (dataContractType == typeof(<#= methodResponseTypeName #><#= methodTypeName #>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #><#= collectionMethod.Name #>Response");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}
<#
			}
#>

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "<#= className #><#= collectionMethod.Name #>")
					return typeof(<#= methodSignatureParameter #>);
			}
<#
			if (!string.IsNullOrWhiteSpace(methodTypeName))
			{
#>

				if (typeName == "<#= className #><#= collectionMethod.Name #>Response")
					return typeof(<#= methodResponseTypeName #><#= methodTypeName #>);
<#
			}
#>

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<I<#= className #>, <#= className #><#= collectionMethod.Name #>Resolver>("<#= collectionMethod.Name #>");
		}
	}

<#
		}
#>
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>