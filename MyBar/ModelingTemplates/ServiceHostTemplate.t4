<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = baseClass + ", ";

// using statements
WriteUsingStatements(this.Element);
#>

namespace <#= classNamespace #>.Host
{
<#
	// Class and Attributes
#>
	public partial class <#= className #>Host
	{
<#
	string aggregateRootName = this.Element.AppliedStereotypes
		.Single(property => property.Name == "Service")
		.PropertyInstances
		.Single(property => property.Name == "AggregateRootName")
		.Value;
	bool shouldBuild = GetElementByFullName(this.Element, aggregateRootName) == null;

	if (shouldBuild)
	{
#>
		protected override void RegisterDataContracts()
		{
			RegisterAggregateServiceDataContracts();
			RegisterServiceDataContracts();
		}

		partial void RegisterServiceDataContracts();
		partial void RegisterAggregateServiceDataContracts();

<#
	}
#>
		partial void RegisterServiceDataContracts()
		{
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
			<#= className #><#= collectionMethod.Name #>Resolver.RegisterDataContracts();
<#
		}
#>
		}

	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>