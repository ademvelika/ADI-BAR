<#+
    /// <summary>
    /// Write standard auto-generated warning header text
    /// </summary>
    private void WriteAutoGeneratedWarningHeader()
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
<#+
        string comment = Microsoft.VisualStudio.ArchitectureTools.TextTransformation.TemplateResources.AutoGenWarningText;

        string[] lines = comment.Split('\n');
        foreach (string line in lines)
        {
            Write(@"//     ");
            WriteLine(line.Trim());
        }
#>
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
<#+
    }

    /// <summary>
    /// Writes a single-line C# doc-comment into the template-generated file.
    /// </summary>
    /// <param name="tag">doc-comment tag (such as "summary", "remarks", "param", "returns", etc. </param>
    /// <param name="tagArguments">arguments to include in the begin tag</param>
    /// <param name="comment">The comment to be written, should NOT contain newline characters.</param>
    private void  WriteSinglelineDocComment(string tag, string tagArguments, string comment)
    {
        string beginTag = " <" + tag;
        if (string.IsNullOrWhiteSpace(tagArguments))
        {
            beginTag += ">";
        }
        else
        {
            beginTag += " " + tagArguments + ">";
        }
        string endTag = "</" + tag + ">";

        comment.Replace("\n", " ");
        comment.Replace("\t", " ");
        comment.Replace(". ", ".  "); // ensure two spaces after a period.
        comment.Trim();

        string text = @"///" + beginTag + comment + endTag;

        Write(text);
        Write("\r\n");
    }

    /// <summary>
    /// Multiline C# doc-comment.
    /// </summary>
    /// <param name="tag">doc-comment tag (such as "summary", "remarks", "param", "returns", etc. </param>
    /// <param name="tagArguments">arguments to include in the begin tag</param>
    /// <param name="comment">The comment to be written in the summary block, may contain newline characters.</param>
    private void WriteMultilineDocComment(string tag, string tagArguments, string comment)
    {
        comment.Trim();

        string beginTag;
        if (string.IsNullOrWhiteSpace(tagArguments))
        {
            beginTag = @"<" + tag + ">";
        }
        else
        {
               beginTag = @"<" + tag + " " + tagArguments +">";
        }
        string endTag = @"</" + tag + ">";

        Write(@"/// "); Write(beginTag); Write("\r\n");

        string[] lines = comment.Split(new char[] { '\n' });
        foreach (string line in lines)
        {
            Write(@"/// " + line); Write("\r\n");
        }

        Write(@"/// " + endTag);
        Write("\r\n");

    }

    /// <summary>
    /// Writes a C# summary comment.
    /// </summary>
    /// <param name="comment">The comment to be written in the summary block, may contain newline characters.</param>
    private void WriteSummaryComment(string comment)
    {
        comment.Trim();
        if(string.IsNullOrWhiteSpace(comment))
        {
            return;
        }
        
        const string tag = "summary";
        WriteMultilineDocComment(tag, null, comment);
    }

    /// <summary>
    /// Writes a C# parameter comment.
    /// </summary>
    /// <param name="paramName">The name of the parameter</param>
    /// <param name="comment">The comment to be written in the param block, may contain newline characters.</param>
    private void WriteParameterComment(string paramName, string comment)
    {
        if(string.IsNullOrWhiteSpace(comment))
        {
            return;
        }

        string tag = "param";
        string tagArguments = @"name="""+ paramName +@"""";

        comment.Trim();
        if (comment.Contains("\n"))
        {
            WriteMultilineDocComment(tag, tagArguments, comment);
        }
        else
        {
            WriteSinglelineDocComment(tag, tagArguments, comment);
        }
    }

    /// <summary>
    /// Writes a C# remarks comment.
    /// </summary>
    /// <param name="comment">The comment to be written in the remarks block, may contain newline characters.</param>
    private void WriteRemarksComment(string comment)
    {
        if(string.IsNullOrWhiteSpace(comment))
        {
            return;
        }
        
        const string tag = "remarks";
        comment.Trim();
        if (comment.Contains("\n"))
        {
            WriteMultilineDocComment(tag, null, comment);
        }
        else
        {
            WriteSinglelineDocComment(tag, null, comment);
        }
    }

    /// <summary>
    /// Writes type params comment according to template parameter's name an description pairs.
    /// </summary>
    /// <param name="templateParameterNameDescriptionPairs">The pairs of name and description for template parameter.</param>
    private void WriteTemplateTypeParameterComments(IEnumerable<Tuple<string, string>> templateParameterNameDescriptionPairs)
    {
        foreach(var pair in templateParameterNameDescriptionPairs)
        {   
            if(string.IsNullOrWhiteSpace(pair.Item1) || string.IsNullOrWhiteSpace(pair.Item2))
            {
                continue;
            }

            string tagArguments = @"name="""+ pair.Item1 +@"""";
            WriteSinglelineDocComment("typeparam", tagArguments, pair.Item2);
        }
    }
#>