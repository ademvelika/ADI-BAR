<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
WriteUsingStatements(this.Element);
#>
using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
	string aggregateRootName = stereoTypeProperties.PropertyInstances
		.Single(property => property.Name == "AggregateRootName")
		.Value;

	bool hasNoAggregateRootService = GetElementByFullName(this.Element, aggregateRootName) == null;
	if (hasNoAggregateRootService)
	{
		baseClass = ": EventService<" + authenticationTokenType + ">, I" + className;
	}
#>
	public <#= GetAbstract(this.Element) #> partial class <#= className #> <#= baseClass #>
	{
<#
	if (hasNoAggregateRootService)
	{
#>
		protected ICommandSender<<#= authenticationTokenType #>> CommandSender { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set; }

		protected IQueryFactory QueryFactory { get; private set; }

		protected IAuthenticationTokenHelper<<#= authenticationTokenType #>> AuthenticationTokenHelper { get; set; }

		protected ICorrelationIdHelper CorrelationIdHelper { get; set; }

		protected ILogger Logger { get; private set; }

		public <#= className #>(ICommandSender<<#= authenticationTokenType #>> commandSender, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, IAuthenticationTokenHelper<<#= authenticationTokenType #>> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger, IEventStore<<#= authenticationTokenType #>> eventStore)
			: base(eventStore, logger, correlationIdHelper, authenticationTokenHelper)
		{
			CommandSender = commandSender;
			UnitOfWorkService = unitOfWorkService;
			QueryFactory = queryFactory;
			AuthenticationTokenHelper = authenticationTokenHelper;
			CorrelationIdHelper = correlationIdHelper;
			Logger = logger;
		}

		protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)
			where TServiceResponse : IServiceResponse
		{
			serviceResponse.CorrelationId = CorrelationIdHelper.GetCorrelationId();
			return serviceResponse;
		}

<#
	}
#>
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodResponseTypeName = "IServiceResponseWithResultData<";
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (IsMethodTypeEntity(collectionMethod))
			{
				string methodTypeNameSuffix = string.Empty;
				while (methodTypeName.EndsWith(">"))
				{
					methodTypeNameSuffix = string.Concat(methodTypeNameSuffix, methodTypeName.Substring(methodTypeName.Length - 1));
					methodTypeName = methodTypeName.Substring(0, methodTypeName.Length - 1);
				}
				methodTypeName = string.Format("{0}Entity{1}", methodTypeName, methodTypeNameSuffix);
			}
			if (methodTypeName == "void")
			{
				methodResponseTypeName = "IServiceResponse";
				methodTypeName = string.Empty;
			}
			else
			{
				if (!methodTypeName.Contains("<"))
					methodTypeName = "Entities." + methodTypeName;
				methodTypeName = methodTypeName + ">";
			}

			string methodParameterList = GetMethodParameterList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterList))
				methodParameterList = methodParameterList + ", ";

			string methodParameterNameList = GetMethodParameterNameList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterNameList))
				methodParameterNameList = methodParameterNameList + ", ";

			var methodSignatureParameter = string.Empty;

			var returnParameter = collectionMethod.OwnedParameters.SingleOrDefault(p => p.Direction == ParameterDirectionKind.Return);
			var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return);
			if (returnParameter == null && parameters.Any())
				methodSignatureParameter = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters> serviceRequest", authenticationTokenType, className, collectionMethod.Name);
			else if (returnParameter != null)
				methodSignatureParameter = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters> serviceRequest", authenticationTokenType, className, collectionMethod.Name);
			else
				methodSignatureParameter = string.Format("IServiceRequest<{0}> serviceRequest", authenticationTokenType);
#>

		public virtual <#= methodResponseTypeName #><#= methodTypeName #> <#= collectionMethod.Name #>(<#= methodSignatureParameter #>)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			<#= methodResponseTypeName #><#= methodTypeName #> results = null;
			On<#= collectionMethod.Name #>(serviceRequest, ref results);
			return CompleteResponse(results);
		}

		partial void On<#= collectionMethod.Name #>(<#= methodSignatureParameter #>, ref <#= methodResponseTypeName #><#= methodTypeName #> results);

<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>