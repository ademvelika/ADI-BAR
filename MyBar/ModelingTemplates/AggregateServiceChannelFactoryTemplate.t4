<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = baseClass + ", ";

// using statements
WriteUsingStatements(this.Element);
#>
using Cqrs.Services;
using <#= classNamespace #>.Services;

namespace <#= classNamespace #>.Services.ServiceHost.Ninject.ServiceChannelFactories
{
<#
	// Class and Attributes
#>
	/// <summary>
	/// A <see cref="ServiceChannelFactory{TService}"/> for using  <see cref="I<#= className #>Service.Create<#= className #>"/> via WCF
	/// </summary>
	public partial class Http<#= className #>ServiceChannelFactory : ServiceChannelFactory<I<#= className #>Service>
	{
		/// <summary>
		/// Instantiates a new instance of the <see cref="Http<#= className #>ServiceChannelFactory"/> class with the default endpoint configuration name of Http<#= className #>Service.
		/// </summary>
		public Http<#= className #>ServiceChannelFactory()
			: this("Http<#= className #>Service")
		{
		}

		/// <summary>
		/// Instantiates a new instance of the <see cref="Http<#= className #>ServiceChannelFactory"/> class with a specified endpoint configuration name.
		/// </summary>
		/// <param name="endpointConfigurationName">The configuration name used for the endpoint.</param>
		public Http<#= className #>ServiceChannelFactory(string endpointConfigurationName)
			: base(endpointConfigurationName)
		{
		}

		protected override void RegisterDataContracts()
		{
			RegisterAggregateServiceDataContracts();
			RegisterServiceDataContracts();
		}

		partial void RegisterServiceDataContracts();
		partial void RegisterAggregateServiceDataContracts();
		partial void RegisterAggregateServiceDataContracts()
		{
	
<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateServiceMethod")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>
			<#= className #>ServiceCreate<#= className #>ParametersResolver.RegisterDataContracts();
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateServiceMethod")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>
			<#= className #>ServiceUpdate<#= className #>ParametersResolver.RegisterDataContracts();
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteServiceMethod")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>
			<#= className #>ServiceDelete<#= className #>ParametersResolver.RegisterDataContracts();
<#
		}
#>
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (!shouldGenerateCodeForElement)
			return false;

		var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
		return stereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildService" && property.Value == "true");
	}
#>