<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Commands;
using Cqrs.Authentication;
using cdmdotnet.Logging;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using <#= classNamespace #>.Commands;
using <#= classNamespace #>.Repositories;

namespace <#= classNamespace #>.Services
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	<#= GetDataContractAttribute(this.Element) #>
	public partial class <#= className #>Service : EventService<<#= authenticationTokenType #>>, I<#= className #>Service
	{
		protected ICommandSender<<#= authenticationTokenType #>> CommandSender { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set; }

		protected I<#= className #>Repository <#= className #>Repository { get; private set; }

		protected IQueryFactory QueryFactory { get; private set; }

		protected IAuthenticationTokenHelper<<#= authenticationTokenType #>> AuthenticationTokenHelper { get; set; }

		protected ICorrelationIdHelper CorrelationIdHelper { get; set; }

		protected ILogger Logger { get; private set; }

		public <#= className #>Service(ICommandSender<<#= authenticationTokenType #>> commandSender, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, IAuthenticationTokenHelper<<#= authenticationTokenType #>> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, I<#= className #>Repository <#= GetLowercaseFirstCharacter(className) #>Repository, ILogger logger, IEventStore<<#= authenticationTokenType #>> eventStore)
			: base(eventStore, logger, correlationIdHelper, authenticationTokenHelper)
		{
			CommandSender = commandSender;
			UnitOfWorkService = unitOfWorkService;
			QueryFactory = queryFactory;
			AuthenticationTokenHelper = authenticationTokenHelper;
			CorrelationIdHelper = correlationIdHelper;
			<#= className #>Repository = <#= GetLowercaseFirstCharacter(className) #>Repository;
			Logger = logger;
		}

<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateServiceMethod")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>
		/// <summary>
		/// Create a new instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		public IServiceResponseWithResultData<Entities.<#= className #>Entity> Create<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #>Entity item = serviceRequest.Data;
			if (item.Rsn == Guid.Empty)
				item.Rsn = Guid.NewGuid();

			var command = new Create<#= className #>Command(item.Rsn<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		for(int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties[i];
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>, item.<#= collectionProperty.Name #><#
		}
#>);
			OnCreate<#= className #>(serviceRequest, command);
			CommandSender.Send(command);
			OnCreated<#= className #>(serviceRequest, command);

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity>(item));
		}

		partial void OnCreate<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, Create<#= className #>Command command);

		partial void OnCreated<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, Create<#= className #>Command command);

<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateServiceMethod")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>
		/// <summary>
		/// Update an existing instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		public IServiceResponseWithResultData<Entities.<#= className #>Entity> Update<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #>Entity item = serviceRequest.Data;

			var locatedItem = <#= className #>Repository.Load(item.Rsn);
			if (locatedItem == null)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = ServiceResponseStateType.FailedValidation });

			var command = new Update<#= className #>Command(item.Rsn<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		for(int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties[i];
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>, item.<#= collectionProperty.Name #><#
		}
#>);
			ServiceResponseStateType? serviceResponseStateType = null;
			OnUpdate<#= className #>(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = serviceResponseStateType.Value });

			CommandSender.Send(command);
			OnUpdated<#= className #>(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity>(item));
		}

		partial void OnUpdate<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, ref Update<#= className #>Command command, Entities.<#= className #>Entity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnUpdated<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, ref Update<#= className #>Command command, Entities.<#= className #>Entity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteServiceMethod")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>
		/// <summary>
		/// Logically delete an existing instance of the <see cref="Entities.<#= className #>Entity"/>
		/// </summary>
		public IServiceResponse Delete<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #>Entity item = serviceRequest.Data;

			var locatedItem = <#= className #>Repository.Load(item.Rsn, false);
			if (locatedItem == null)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = ServiceResponseStateType.FailedValidation });

			if (locatedItem.IsLogicallyDeleted)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = ServiceResponseStateType.FailedValidation });

			var command = new Delete<#= className #>Command(item.Rsn);
			ServiceResponseStateType? serviceResponseStateType = null;
			OnDelete<#= className #>(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = serviceResponseStateType.Value });

			CommandSender.Send(command);
			OnDeleted<#= className #>(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.<#= className #>Entity> { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponse());
		}

		partial void OnDelete<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, ref Delete<#= className #>Command command, Entities.<#= className #>Entity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnDeleted<#= className #>(IServiceRequestWithData<<#= authenticationTokenType #>, Entities.<#= className #>Entity> serviceRequest, ref Delete<#= className #>Command command, Entities.<#= className #>Entity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);
<#
		}
#>

		protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)
			where TServiceResponse : IServiceResponse
		{
			serviceResponse.CorrelationId = CorrelationIdHelper.GetCorrelationId();
			return serviceResponse;
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (!shouldGenerateCodeForElement)
			return false;

		var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
		return stereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildService" && property.Value == "true");
	}
#>