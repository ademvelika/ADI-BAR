<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
WriteUsingStatements(this.Element);
string commandHandlerTechnology = GetCommandHandlerTechnology(this.Element);
switch(commandHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>using Akka.Actor;
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
using Cqrs.Commands;
using Cqrs.Configuration;
using Cqrs.Domain;
using cdmdotnet.Logging;

namespace <#= classNamespace #>.Commands.Handlers
{
<#
	// Class and Attributes
	string commandHandlerTechnologyBaseClass = "ICommandHandler<" + authenticationTokenType + ", Create" + className + "Command>";
	if (!string.IsNullOrWhiteSpace(baseClass))
	{
		baseClass = ": " + baseClass;
		commandHandlerTechnologyBaseClass = ", " + commandHandlerTechnologyBaseClass;
	}
	else
		commandHandlerTechnologyBaseClass = ": " + commandHandlerTechnologyBaseClass;
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class Create<#= className #>CommandHandler
		<#= baseClass #>
		<#= commandHandlerTechnologyBaseClass #>
	{
		protected IUnitOfWork<<#= authenticationTokenType #>> UnitOfWork { get; private set; }

		protected IDependencyResolver DependencyResolver { get; private set; }

		protected ILogger Logger { get; private set; }

<#
switch(commandHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>

		/// <summary>
		/// Instantiates the <see cref="Create<#= className #>CommandHandler"/> class registering any <see cref="ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public Create<#= className #>CommandHandler()
		{
			Receive<Create<#= className #>Command>(command => Handle(command));
		}
<#
		break;
	default:
		// for now do nothing
		break;
}
#>

		public Create<#= className #>CommandHandler(IUnitOfWork<<#= authenticationTokenType #>> unitOfWork, IDependencyResolver dependencyResolver, ILogger logger)
<#
switch(commandHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>
			: this()
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
			UnitOfWork = unitOfWork;
			DependencyResolver = dependencyResolver;
			Logger = logger;
		}

		#region Implementation of ICommandHandler<in Create<#= className #>>

		public void Handle(Create<#= className #>Command command)
		{
			<#= className #> item = null;
			OnCreate<#= className #>(command, ref item);
			if (item == null)
			{
				item = new <#= className #>(DependencyResolver, Logger, command.Rsn == Guid.Empty ? Guid.NewGuid() : command.Rsn);
				UnitOfWork.Add(item);
			}
			item.Create<#= className #>(<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #>command.<#= collectionProperty.Name #><#
		}
#>);
			OnCreated<#= className #>(command, item);
			OnAddToUnitOfWork(command, item);
			UnitOfWork.Add(item);
			OnAddedToUnitOfWork(command, item);
			OnCommit(command, item);
			UnitOfWork.Commit();
			OnCommited(command, item);
		}

		#endregion

		partial void OnCreate<#= className #>(Create<#= className #>Command command, ref <#= className #> item);

		partial void OnCreated<#= className #>(Create<#= className #>Command command, <#= className #> item);

		partial void OnAddToUnitOfWork(Create<#= className #>Command command, <#= className #> item);

		partial void OnAddedToUnitOfWork(Create<#= className #>Command command, <#= className #> item);

		partial void OnCommit(Create<#= className #>Command command, <#= className #> item);

		partial void OnCommited(Create<#= className #>Command command, <#= className #> item);
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var stereoTypeProperties = this.Element.AppliedStereotypes.Where(property => property.Name == "AggregateRoot");
		return ShouldGenerateCodeForElement(this.Element) && stereoTypeProperties.Any() && stereoTypeProperties.Single().PropertyInstances
			.Single(property => property.Name == "BuildCreateCommand")
			.Value == "true";
	}
#>