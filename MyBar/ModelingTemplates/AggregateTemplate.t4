<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (string.IsNullOrWhiteSpace(baseClass))
{
	bool isSnapshotable = stereoTypeProperties.PropertyInstances
		.Single(property => property.Name == "IsSnapshotable")
		.Value == "true";
	if (isSnapshotable)
		baseClass = string.Format("SnapshotAggregateRoot<" + authenticationTokenType + ", {0}.{0}Snapshot>", className);
}

// using statements
WriteUsingStatements(this.Element);
string aggregateTechnology = GetAggregateTechnology(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "AkkaAggregateRoot<" + authenticationTokenType + ">";
#>using Akka.Actor;
using Cqrs.Akka.Domain;
<#
		break;
	default:
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "AggregateRoot<" + authenticationTokenType + ">";
		break;
}
#>
using Cqrs.Configuration;
using cdmdotnet.Logging;
using Cqrs.Snapshots;
using <#= classNamespace #>.Events;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #> : <#= baseClass #>
	{
		public Guid Rsn
		{
			get { return Id; }
			private set { Id = value; }
		}

		public bool IsLogicallyDeleted {get; set;}

		#region Implementation of IMessageWithAuthenticationToken<<#= authenticationTokenType #>>

		public <#= authenticationTokenType #> AuthenticationToken { get; set; }

		#endregion

		protected IDependencyResolver DependencyResolver { get; private set; }

		protected ILogger Log { get; private set; }

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>
<# WriteSummaryComment(collectionProperty.Description); #>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }

<#
		}
#>
// ReSharper disable UnusedMember.Local
		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>()
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: base()
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
				if (!collectionProperty.AppliedStereotypes.Any())
					continue;
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>

<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			if (!ShouldGenerateCodeForElement(collectionMethod))
				continue;
#>
			Receive<<#= collectionMethod.Name #>Parameters>(parameters => <#= collectionMethod.Name #>(parameters));
<#
		}
		break;
}
#>
		}

		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>(IDependencyResolver dependencyResolver, ILogger log)
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: this()
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
			DependencyResolver = dependencyResolver;
			Log = log;
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
				if (!collectionProperty.AppliedStereotypes.Any())
					continue;
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
// ReSharper restore UnusedMember.Local

		public <#= className #>(IDependencyResolver dependencyResolver, ILogger log, Guid rsn)
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: this()
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
			DependencyResolver = dependencyResolver;
			Log = log;
			Rsn = rsn;
		}
<#
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			bool isSimple = false;
			string eventName = null;
			var methodStereoTypeProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "AggregateRootMethod");
			if (!ShouldGenerateCodeForElement(collectionMethod))
				continue;
			if (methodStereoTypeProperties != null)
			{
				isSimple = methodStereoTypeProperties.PropertyInstances.Any(property => property.Name == "AggregateRootMethodType" && property.Value == "Simple");
				if (isSimple)
					eventName = methodStereoTypeProperties.PropertyInstances.Single(property => property.Name == "EventName").Value;
			}
#>
<#
		if (aggregateTechnology == "Akka")
		{
#>
		public virtual void <#= collectionMethod.Name #>(<#= collectionMethod.Name #>Parameters parameter)
		{
			<#= collectionMethod.Name #>(<#
				var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return).ToList();
				var methodBody = new System.Text.StringBuilder();
				int akkaIndex = 0;
				foreach (IParameter collectionProperty in parameters)
				{
					if (!collectionProperty.AppliedStereotypes.Any())
						continue;
					if (akkaIndex > 0)
						methodBody.Append(", ");
					akkaIndex++;
					methodBody.Append("parameter.");
					methodBody.Append(collectionProperty.Name);
				}
#><#= methodBody.ToString() #>);
		}
<#
		}
#>

		public virtual void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			Log.LogDebug("Entered", "<#= className #>/<#= collectionMethod.Name #>");
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
				string applyEventParameters = GetMethodParameterNameList(collectionMethod);
				if (!string.IsNullOrWhiteSpace(applyEventParameters))
					applyEventParameters = string.Format(", {0}", applyEventParameters);
#>
			Log.LogDebug("Applying event", "<#= className #>/<#= collectionMethod.Name #>/<#= eventName #>");
			ApplyChange(new <#= eventName #>(Rsn<#= applyEventParameters #>));
<#
			}
			else
			{
#>
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
<#
			}
#>
			Log.LogDebug("Exited", "<#= className #>/<#= collectionMethod.Name #>");
		}
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
#>
		private void Apply(<#= eventName #> @event)
		{
			OnApply(@event);
		}
		partial void OnApply(<#= eventName #> @event);
<#
			}
			else
			{
#>
		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
			}
#>

<#
		}
#>
<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateCommand")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>

		/// <summary>
		/// Create a new instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Create<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			Log.LogDebug("Entered", "<#= className #>/Create<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/OnCreate<#= className #>");
			OnCreate<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= i == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);
			Log.LogDebug("Post", "<#= className #>/OnCreate<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/ApplyChange/Create");
			ApplyChange(new <#= className #>Created(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
			Log.LogDebug("Post", "<#= className #>/ApplyChange");
			Log.LogDebug("Pre", "<#= className #>/OnCreated<#= className #>");
			OnCreated<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= i == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);
			Log.LogDebug("Post", "<#= className #>/OnCreated<#= className #>");
			Log.LogDebug("Exited", "<#= className #>/Create<#= className #>");
		}

		partial void OnCreate<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);

		partial void OnCreated<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);

		private void Apply(<#= className #>Created @event)
		{
<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>			<#= collectionProperty.Name #> = @event.<#= collectionProperty.Name #>;
<#
		}
#>
		}
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateCommand")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>

		/// <summary>
		/// Update an existing instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Update<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			Log.LogDebug("Entered", "<#= className #>/Update<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/OnUpdate<#= className #>");
			OnUpdate<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= i == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);
			Log.LogDebug("Post", "<#= className #>/OnUpdate<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/ApplyChange/Update");
			ApplyChange(new <#= className #>Updated(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
			Log.LogDebug("Post", "<#= className #>/ApplyChange");
			Log.LogDebug("Pre", "<#= className #>/OnUpdated<#= className #>");
			OnUpdated<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= i == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);
			Log.LogDebug("Post", "<#= className #>/OnUpdated<#= className #>");
			Log.LogDebug("Exited", "<#= className #>/Update<#= className #>");
		}

		partial void OnUpdate<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);

		partial void OnUpdated<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);

		private void Apply(<#= className #>Updated @event)
		{
<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>			<#= collectionProperty.Name #> = @event.<#= collectionProperty.Name #>;
<#
		}
#>
		}
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteCommand")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>

		/// <summary>
		/// Logically delete an existing instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Delete<#= className #>()
		{
			Log.LogDebug("Entered", "<#= className #>/Delete<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/OnDelete<#= className #>");
			OnDelete<#= className #>();
			Log.LogDebug("Post", "<#= className #>/OnDelete<#= className #>");
			Log.LogDebug("Pre", "<#= className #>/ApplyChange/Delete");
			ApplyChange(new <#= className #>Deleted(Rsn));
			Log.LogDebug("Post", "<#= className #>/ApplyChange");
			Log.LogDebug("Pre", "<#= className #>/OnDeleted<#= className #>");
			OnDeleted<#= className #>();
			Log.LogDebug("Post", "<#= className #>/OnDeleted<#= className #>");
			Log.LogDebug("Exited", "<#= className #>/Delete<#= className #>");
		}

		partial void OnDelete<#= className #>();

		partial void OnDeleted<#= className #>();

		private void Apply(<#= className #>Deleted @event)
		{
			IsLogicallyDeleted = true;
		}
<#
		}
#>

		public class <#= className #>Snapshot : Snapshot
		{
			public bool IsLogicallyDeleted {get; set;}
<#
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
#>

<# WriteSummaryComment(collectionProperty.Description); #>
			<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }
<#
		}
#>
		}
	}
<#
		if (aggregateTechnology == "Akka")
		{
			// Methods
			foreach(IOperation collectionMethod in collectionMethods)
			{
#>

	public class <#= collectionMethod.Name #>Parameters
	{
<#
				var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return).ToList();
				foreach (IParameter collectionProperty in parameters)
				{
					if (!collectionProperty.AppliedStereotypes.Any())
						continue;
#>

		public <#= GetFullDisplayType(collectionProperty, false) #> <#= collectionProperty.Name #> { get; set; }
<#
				}
#>
	}
<#
			}
		}
#>
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
	}
#>