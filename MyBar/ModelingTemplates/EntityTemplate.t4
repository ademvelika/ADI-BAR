<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Entity");
bool isAggregateTo = this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
string entityPersistenceTechnology = GetEntityPersistenceTechnology(this.Element);
var tableNameProperty = stereoTypeProperties.PropertyInstances
	.SingleOrDefault(property => property.Name == "TableName");
string tableName = tableNameProperty != null && !string.IsNullOrWhiteSpace(tableNameProperty.Value) ? tableNameProperty.Value : className + "Entity";

if (string.IsNullOrWhiteSpace(baseClass))
{
	if (entityPersistenceTechnology == "MongoDb")
		baseClass = "MongoEntity";
	else if (entityPersistenceTechnology == "AzureDocumentDb")
		baseClass = "AzureDocumentDbEntity";
	else
		baseClass = "Entity";
}

// using statements
WriteUsingStatements(this.Element);
#>
using Cqrs.Entities;
<# if (entityPersistenceTechnology == "MongoDb") { #>
using Cqrs.Mongo.Entities;
<# } else if (entityPersistenceTechnology == "AzureDocumentDb") { #>
using Cqrs.Azure.DocumentDb.Entities;
<# } #> 
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.Serialization;

namespace <#= classNamespace #><#= isAggregateTo ? ".Entities" : string.Empty #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	[Serializable]
	[DataContract]
	[Table(Name = "<#= tableName #>")]
	public <#= GetAbstract(this.Element) #> partial class <#= className #>Entity : <#= baseClass #>, I<#= className #>Entity
	{
		[DataMember]
		[Column(IsPrimaryKey = true)]
		public override Guid Rsn { get; set; }

		[DataMember]
		[Column]
		public override int SortingOrder { get; set; }

		[DataMember]
		[Column]
		public override bool IsLogicallyDeleted { get; set; }

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (!collectionProperty.AppliedStereotypes.Any())
				continue;
			var propertyStereoTypeProperties = collectionProperty.AppliedStereotypes.Single(property => property.Name == "EntityProperty");
			var columnNameProperty = propertyStereoTypeProperties.PropertyInstances
				.SingleOrDefault(property => property.Name == "ColumnName");
			string columnName = columnNameProperty != null && !string.IsNullOrWhiteSpace(columnNameProperty.Value) ? string.Format("Column(Name = \"{0}\")", columnNameProperty.Value) : "Column";
#>
<# WriteSummaryComment(collectionProperty.Description); #>
		[DataMember]
		[<#= columnName #>]
		<#= GetPropertyVisibility(collectionProperty) #> virtual <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; set; }

<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Entity");
	}
#>