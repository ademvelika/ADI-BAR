<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Domain");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = this.Element.Name;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using cdmdotnet.Logging;
using Cqrs.Ninject.Configuration;
using <#= classNamespace #>.<#= className #>.Host.Configuration;
using Ninject.Modules;

namespace <#= classNamespace #>.<#= className #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public abstract partial class <#= className #>Host<THostModule>
			where THostModule : NinjectModule, new()
	{
		public virtual void Configure()
		{
			Trace.TraceInformation("Starting configurations...");
			GetDomainConfiguration().Start();
			Trace.TraceInformation("Setting service point configurations...");
			new ServicePointManagerConfiguration().Start();

			Trace.TraceInformation("Data contracts configuring...");
<#
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
			var aggregateRootStereoTypeProperties = element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool shouldBuild = aggregateRootStereoTypeProperties.PropertyInstances
				.Any(property => property.Name == "BuildService" && property.Value == "true");
			if (shouldBuild)
			{
#>
			new <#= moduleName #>.Services.Host.<#= elementName #>ServiceHost().RegisterDataContracts();
<#
			}
		}
#>

			Trace.TraceInformation("Data contracts configured.");
		}

		protected virtual DomainConfiguration<THostModule> GetDomainConfiguration()
		{
			return new DomainConfiguration<THostModule>();
		}
		public virtual void Start()
		{
			LogApplicationStarted();

			Run();

			LogApplicationStopped();
		}

		protected abstract void Run();

		protected virtual ILogger GetLogger()
		{
			return NinjectDependencyResolver.Current.Resolve<ILogger>();
		}

		protected virtual void LogApplicationStarted()
		{
			try
			{
				ILogger logger = GetLogger();

				if (logger != null)
				{
					NinjectDependencyResolver.Current.Resolve<ICorrelationIdHelper>().SetCorrelationId(Guid.Empty);
					logger.LogInfo("Application started.", "LogApplicationStarted");
				}
			}
			catch { }
		}

		protected virtual void LogApplicationStopped()
		{
			try
			{
				ILogger logger = GetLogger();

				if (logger != null)
				{
					NinjectDependencyResolver.Current.Resolve<ICorrelationIdHelper>().SetCorrelationId(Guid.Empty);
					logger.LogInfo("Application stopped.", "LogApplicationStopped");
				}
			}
			catch { }
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Domain");
	}
#>