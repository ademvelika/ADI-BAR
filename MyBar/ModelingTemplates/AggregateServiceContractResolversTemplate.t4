<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = baseClass + ", ";

// using statements
WriteUsingStatements(this.Element);
#>
using System.Xml;
using Cqrs.Events;
using Cqrs.Services;
using <#= classNamespace #>.Entities;

namespace <#= classNamespace #>.Services
{
<#
	// Class and Attributes
#>
<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateServiceMethod")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using  <see cref="I<#= className #>Service.Create<#= className #>"/> via WCF
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>ServiceCreate<#= className #>ParametersResolver : ServiceParameterResolver<I<#= className #>Service, <#= authenticationTokenType #>>
	{
		public <#= className #>ServiceCreate<#= className #>ParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}

<#
string authenticationTokenTypeResolver = authenticationTokenType;
int index = authenticationTokenTypeResolver.LastIndexOf(".");
if (index > 0)
	authenticationTokenTypeResolver = string.Format("{0}{1}Resolver", authenticationTokenTypeResolver.Substring(0, index + 1), authenticationTokenTypeResolver.Substring(index + 2));
#>
		public <#= className #>ServiceCreate<#= className #>ParametersResolver()
			: base(new <#= authenticationTokenTypeResolver #>(), new EventDataResolver<<#= authenticationTokenType #>>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceCreate<#= className #>Parameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			if (dataContractType == typeof(ServiceResponseWithResultData<<#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceCreate<#= className #>Response");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "<#= className #>ServiceCreate<#= className #>Parameters")
					return typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>);

				if (typeName == "<#= className #>ServiceCreate<#= className #>Response")
					return typeof(ServiceResponseWithResultData<<#= className #>Entity>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<I<#= className #>Service, <#= className #>ServiceCreate<#= className #>ParametersResolver>("Create<#= className #>");
		}
	}

<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateServiceMethod")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using  <see cref="I<#= className #>Service.Update<#= className #>"/> via WCF
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>ServiceUpdate<#= className #>ParametersResolver : ServiceParameterResolver<I<#= className #>Service, <#= authenticationTokenType #>>
	{
		public <#= className #>ServiceUpdate<#= className #>ParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}

<#
string authenticationTokenTypeResolver = authenticationTokenType;
int index = authenticationTokenTypeResolver.LastIndexOf(".");
if (index > 0)
	authenticationTokenTypeResolver = string.Format("{0}{1}Resolver", authenticationTokenTypeResolver.Substring(0, index + 1), authenticationTokenTypeResolver.Substring(index + 2));
#>
		public <#= className #>ServiceUpdate<#= className #>ParametersResolver()
			: base(new <#= authenticationTokenTypeResolver #>(), new EventDataResolver<<#= authenticationTokenType #>>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceUpdate<#= className #>Parameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			if (dataContractType == typeof(ServiceResponseWithResultData<<#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceUpdate<#= className #>Response");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "<#= className #>ServiceUpdate<#= className #>Parameters")
					return typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>);

				if (typeName == "<#= className #>ServiceUpdate<#= className #>Response")
					return typeof(ServiceResponseWithResultData<<#= className #>Entity>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<I<#= className #>Service, <#= className #>ServiceUpdate<#= className #>ParametersResolver>("Update<#= className #>");
		}
	}

<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteServiceMethod")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using  <see cref="I<#= className #>Service.Delete<#= className #>"/> via WCF
	/// </summary>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>ServiceDelete<#= className #>ParametersResolver : ServiceParameterResolver<I<#= className #>Service, <#= authenticationTokenType #>>
	{
		public <#= className #>ServiceDelete<#= className #>ParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}

<#
string authenticationTokenTypeResolver = authenticationTokenType;
int index = authenticationTokenTypeResolver.LastIndexOf(".");
if (index > 0)
	authenticationTokenTypeResolver = string.Format("{0}{1}Resolver", authenticationTokenTypeResolver.Substring(0, index + 1), authenticationTokenTypeResolver.Substring(index + 2));
#>
		public <#= className #>ServiceDelete<#= className #>ParametersResolver()
			: base(new <#= authenticationTokenTypeResolver #>(), new EventDataResolver<<#= authenticationTokenType #>>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceDelete<#= className #>Parameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			if (dataContractType == typeof(ServiceResponseWithResultData<<#= className #>Entity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("<#= className #>ServiceDelete<#= className #>Response");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "<#= className #>ServiceDelete<#= className #>Parameters")
					return typeof(ServiceRequestWithData<<#= authenticationTokenType #>, <#= className #>Entity>);

				if (typeName == "<#= className #>ServiceDelete<#= className #>Response")
					return typeof(ServiceResponseWithResultData<<#= className #>Entity>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<I<#= className #>Service, <#= className #>ServiceDelete<#= className #>ParametersResolver>("Delete<#= className #>");
		}
	}

<#
		}
#>
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (!shouldGenerateCodeForElement)
			return false;

		var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
		return stereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildService" && property.Value == "true");
	}
#>