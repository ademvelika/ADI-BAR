<#@ Include File="TemplateHeader.t4"  #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Entity");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);

string domainName = ((INamedElement)FindDomainElement(this.Element)).Name;


// using statements
WriteUsingStatements(this.Element);
#>
using Cqrs.Repositories;
using <#= GetNamespace(((INamedElement)FindModuleElement(this.Element)).Namespace) #>.Factories;
<#
string standardisedClassNamespace = classNamespace;
int lastDotIndex = standardisedClassNamespace.LastIndexOf('.');
if (lastDotIndex > -1)
  standardisedClassNamespace = classNamespace.Substring(0, lastDotIndex);
#>
using <#= standardisedClassNamespace #>.Repositories.Queries.Strategies;

namespace <#= classNamespace #>.Repositories
{
<#
	// Class and Attributes
	string entityPersistenceTechnology = GetEntityPersistenceTechnology(this.Element);
	string repositoryClassName = "Repository";
	if (entityPersistenceTechnology == "AzureDocumentDb")
		repositoryClassName = "Cqrs.Azure.DocumentDb.Repositories.AzureRepository";

#>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>Repository : <#= repositoryClassName #><<#= className #>QueryStrategy, <#= className #>QueryStrategyBuilder, Entities.<#= className #>Entity>, I<#= className #>Repository
	{
		public <#= className #>Repository(I<#= domainName #>DataStoreFactory dataStoreFactory, <#= className #>QueryStrategyBuilder <#= GetLowercaseFirstCharacter(className) #>QueryBuilder)
			: base(dataStoreFactory.Get<#= className #>DataStore, <#= GetLowercaseFirstCharacter(className) #>QueryBuilder)
		{
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Entity");
		if (!shouldGenerateCodeForElement)
			return false;

		var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Entity");
		shouldGenerateCodeForElement = stereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildRepository" && property.Value == "true");

		if (!shouldGenerateCodeForElement)
			return false;

		// Special note the inverse check
		shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (shouldGenerateCodeForElement)
			return false;

		return true;
	}
#>