//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MYBAR
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Entity.Core.EntityClient;

    public partial class BPDBEntities : DbContext
    {
        public BPDBEntities()
            : base("name=BPDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<MenuCategories> MenuCategories { get; set; }
        public virtual DbSet<MenuItems> MenuItems { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrderSessions> OrderSessions { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<Places> Places { get; set; }
        public virtual DbSet<PlaceTypes> PlaceTypes { get; set; }
        public virtual DbSet<Tables> Tables { get; set; }
        public virtual DbSet<OrderInfo> OrderInfo { get; set; }
        public virtual DbSet<Balance> Balance { get; set; }
        public virtual DbSet<Goods_Dispatch_Note> Goods_Dispatch_Note { get; set; }
        public virtual DbSet<Goods_Dispatch_Note_Details> Goods_Dispatch_Note_Details { get; set; }
        public virtual DbSet<Goods_Received_Note> Goods_Received_Note { get; set; }
        public virtual DbSet<Goods_Received_Note_Details> Goods_Received_Note_Details { get; set; }
        public virtual DbSet<LastBalance> LastBalance { get; set; }
        public virtual DbSet<PriceList> PriceList { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<ClientOrder> ClientOrder { get; set; }
        public virtual DbSet<ClientOrderDetails> ClientOrderDetails { get; set; }
        public virtual DbSet<UserDatas> UserDatas { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<OrderForCancellation> OrderForCancellation { get; set; }
        public virtual DbSet<ComposedItems> ComposedItems { get; set; }
        public virtual DbSet<MenuItemType> MenuItemType { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
    
        [DbFunction("BPDBEntities", "getXhiroDitore")]
        public virtual IQueryable<getXhiroDitore_Result> getXhiroDitore(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getXhiroDitore_Result>("[BPDBEntities].[getXhiroDitore](@userid)", useridParameter);
        }
    
        [DbFunction("BPDBEntities", "ArtikullHistory")]
        public virtual IQueryable<ArtikullHistory_Result> ArtikullHistory(Nullable<int> menuItemId)
        {
            var menuItemIdParameter = menuItemId.HasValue ?
                new ObjectParameter("menuItemId", menuItemId) :
                new ObjectParameter("menuItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ArtikullHistory_Result>("[BPDBEntities].[ArtikullHistory](@menuItemId)", menuItemIdParameter);
        }
    
        [DbFunction("BPDBEntities", "getXhiroDitoreTotalAllUser")]
        public virtual IQueryable<getXhiroDitoreTotalAllUser_Result1> getXhiroDitoreTotalAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getXhiroDitoreTotalAllUser_Result1>("[BPDBEntities].[getXhiroDitoreTotalAllUser]()");
        }
    
        public virtual int mbyllTurn(string userid, Nullable<int> posId, Nullable<decimal> cashTotal, Nullable<decimal> tipsTotal, ObjectParameter id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var posIdParameter = posId.HasValue ?
                new ObjectParameter("PosId", posId) :
                new ObjectParameter("PosId", typeof(int));
    
            var cashTotalParameter = cashTotal.HasValue ?
                new ObjectParameter("cashTotal", cashTotal) :
                new ObjectParameter("cashTotal", typeof(decimal));
    
            var tipsTotalParameter = tipsTotal.HasValue ?
                new ObjectParameter("TipsTotal", tipsTotal) :
                new ObjectParameter("TipsTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("mbyllTurn", useridParameter, posIdParameter, cashTotalParameter, tipsTotalParameter, id);
        }

        public static explicit operator EntityConnection(BPDBEntities v)
        {
            throw new NotImplementedException();
        }
    }
}
